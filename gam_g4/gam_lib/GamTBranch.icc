/* --------------------------------------------------
   Copyright (C): OpenGATE Collaboration
   This software is distributed under the terms
   of the GNU Lesser General  Public Licence (LGPL)
   See LICENSE.md for further details
   -------------------------------------------------- */


template<class T>
GamBranch<T>::~GamBranch<T>() {
}

template<class T>
void GamBranch<T>::FillToRoot(G4GenericAnalysisManager *, unsigned long) {
    std::ostringstream oss;
    oss << "FillToRoot<T> must be implemented " << typeid(T).name();
    Fatal(oss.str());
}


template<class T>
void GamBranch<T>::CopyValues(GamVBranch *output, std::vector<unsigned long> &indexes) {
    auto voutput = static_cast<GamBranch<T> *>(output);
    for (unsigned long i = 0; i < indexes.size(); i++) {
        voutput->values.push_back(values[indexes[i]]);
    }
}
